<h2 id="introduction">Introduction</h2>
<p>
The best way to explain this topic is with a problem:
</p>
<blockquote>
You are given a text T (1 &lt;= |T| &lt;= 1,000,000) and n (1 &lt;= n &lt;= 1000) patterns, each pattern P<sub>i</sub> has at least 1 and at most 500 characters. Find how many times each pattern occurs in T.
</blockquote>
<p>
Although we can find the number of occurrences of a pattern in linear time (for example, using the <a href="/z-algorithm" target="_blank">Z Algorithm</a>) , there are many patterns and so this approach will not be fast enough to finish in a reasonably amount of time.
</p>
<p>
In short and as you probably have already guessed, there exist a more efficient solution to this problem than our first attempt, the string matching algorithm invented by Alfred V. Aho and Margaret J. Corasick. I will not try to explain the algorithm because the authors explain it very well in their paper, Iâ€™m only going to provide you with an implementation and some practice problems.
</p>
<p>
This is the paper <a href="/aho-corasick/AhoCorasick.pdf">Efficient String Matching: An Aid to Bibliographic Search</a>
</p>
<p>
Usually these papers are very complex and hard to understand without enough background, but to my surprise, this one is well explained and easy to understand.
</p>
<h2 id="aho-corasick-implementation-in-c">Aho-Corasick implementation in C++</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">// Maximum number of states, at least as large as the sum of all key word&#39;s length.</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> MAX <span class="op">=</span> <span class="dv">505</span> <span class="op">*</span> <span class="dv">505</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">// Alphabet size, 26 for lower case English letters.</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> ALPHA_SIZE <span class="op">=</span> <span class="dv">26</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> FAIL <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="co">// Maximum length of the text.</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> MAX_LENGTH <span class="op">=</span> <span class="dv">1000010</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> g<span class="op">[</span>MAX<span class="op">][</span>ALPHA_SIZE<span class="op">];</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> f<span class="op">[</span>MAX<span class="op">];</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> output<span class="op">[</span>MAX<span class="op">];</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> text<span class="op">[</span>MAX_LENGTH<span class="op">];</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> new_state<span class="op">;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> enter<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>word<span class="op">,</span> <span class="dt">int</span> index<span class="op">)</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> length <span class="op">=</span> strlen<span class="op">(</span>word<span class="op">);</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> j<span class="op">,</span> state <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> length<span class="op">;</span> j<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> c <span class="op">=</span> word<span class="op">[</span>j<span class="op">]</span> <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>g<span class="op">[</span>state<span class="op">][</span>c<span class="op">]</span> <span class="op">==</span> FAIL<span class="op">)</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        state <span class="op">=</span> g<span class="op">[</span>state<span class="op">][</span>c<span class="op">];</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span> <span class="op">;</span> j <span class="op">&lt;</span> length<span class="op">;</span> j<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> c <span class="op">=</span> word<span class="op">[</span>j<span class="op">]</span> <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        new_state<span class="op">++;</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        g<span class="op">[</span>state<span class="op">][</span>c<span class="op">]</span> <span class="op">=</span> new_state<span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        state <span class="op">=</span> new_state<span class="op">;</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    output<span class="op">[</span>state<span class="op">].</span>push_back<span class="op">(</span>index<span class="op">);</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span>  n<span class="op">;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> word<span class="op">[</span><span class="dv">505</span><span class="op">];</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> count<span class="op">[</span><span class="dv">505</span><span class="op">];</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>n<span class="op">);</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>    scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> text<span class="op">);</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Build goto function</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    new_state <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>    memset<span class="op">(</span>g<span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="kw">sizeof</span> g<span class="op">);</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    memset<span class="op">(</span>f<span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="kw">sizeof</span> f<span class="op">);</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> MAX<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        output<span class="op">[</span>i<span class="op">].</span>clear<span class="op">();</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Read patterns and build the Trie</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>        scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> word<span class="op">);</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>        count<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        enter<span class="op">(</span>word<span class="op">,</span> i<span class="op">);</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">char</span> c <span class="op">=</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span> c <span class="op">&lt;=</span> <span class="ch">&#39;z&#39;</span><span class="op">;</span> c<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> a <span class="op">=</span> c <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>g<span class="op">[</span><span class="dv">0</span><span class="op">][</span>a<span class="op">]</span> <span class="op">==</span> FAIL<span class="op">)</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>            g<span class="op">[</span><span class="dv">0</span><span class="op">][</span>a<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Build failure function</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>    queue<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> Q<span class="op">;</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">char</span> c <span class="op">=</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span> c <span class="op">&lt;=</span> <span class="ch">&#39;z&#39;</span><span class="op">;</span> c<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> a <span class="op">=</span> c <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> s <span class="op">=</span> g<span class="op">[</span><span class="dv">0</span><span class="op">][</span>a<span class="op">];</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>s <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>            Q<span class="op">.</span>push<span class="op">(</span>s<span class="op">);</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>            f<span class="op">[</span>s<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(!</span>Q<span class="op">.</span>empty<span class="op">())</span> <span class="op">{</span></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> r <span class="op">=</span> Q<span class="op">.</span>front<span class="op">();</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        Q<span class="op">.</span>pop<span class="op">();</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">char</span> c <span class="op">=</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span> c <span class="op">&lt;=</span> <span class="ch">&#39;z&#39;</span><span class="op">;</span> c<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> a <span class="op">=</span> c <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> s <span class="op">=</span> g<span class="op">[</span>r<span class="op">][</span>a<span class="op">];</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>s <span class="op">!=</span> FAIL<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>                Q<span class="op">.</span>push<span class="op">(</span>s<span class="op">);</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> state <span class="op">=</span> f<span class="op">[</span>r<span class="op">];</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span> <span class="op">(</span>g<span class="op">[</span>state<span class="op">][</span>a<span class="op">]</span> <span class="op">==</span> FAIL<span class="op">)</span></span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>                    state <span class="op">=</span> f<span class="op">[</span>state<span class="op">];</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>                f<span class="op">[</span>s<span class="op">]</span> <span class="op">=</span> g<span class="op">[</span>state<span class="op">][</span>a<span class="op">];</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> k <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> k <span class="op">&lt;</span> output<span class="op">[</span>f<span class="op">[</span>s<span class="op">]].</span>size<span class="op">();</span> k<span class="op">++)</span></span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>                    output<span class="op">[</span>s<span class="op">].</span>push_back<span class="op">(</span>output<span class="op">[</span>f<span class="op">[</span>s<span class="op">]][</span>k<span class="op">]);</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Count occurrences</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> state <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> length <span class="op">=</span> strlen<span class="op">(</span>text<span class="op">);</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> length<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> a <span class="op">=</span> text<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="ch">&#39;a&#39;</span><span class="op">;</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>g<span class="op">[</span>state<span class="op">][</span>a<span class="op">]</span> <span class="op">==</span> FAIL<span class="op">)</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>            state <span class="op">=</span> f<span class="op">[</span>state<span class="op">];</span></span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>        state <span class="op">=</span> g<span class="op">[</span>state<span class="op">][</span>a<span class="op">];</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> k <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> k <span class="op">&lt;</span> output<span class="op">[</span>state<span class="op">].</span>size<span class="op">();</span> k<span class="op">++)</span></span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>            count<span class="op">[</span>output<span class="op">[</span>state<span class="op">][</span>k<span class="op">]]++;</span></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> count<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="practice-problems">Practice problems</h2>
<ul>
<li>
<a href="http://lightoj.com/volume_showproblem.php?problem=1427" target="_blank">Light OJ 1427 - Substring Frequency (II)</a> | <a href="https://gist.github.com/rendon/042fab740fcb859ca34b" target="_blank">My solution</a>
</li>
<li>
<a href="http://codeforces.com/contest/433/problem/E" target="_blank">Codeforces #248 Div 2 E. Tachibana Kanadeâ€™s Tofu</a> | <a href="https://gist.github.com/rendon/b12375831e143732cb63" target="_blank">My solution</a>
</li>
</ul>
<h2 id="references">References</h2>
<p>&lt;% add_bib(â€˜acâ€™, â€˜Alfred V. Aho and Margaret J. Corasickâ€™, â€˜Efficient String Matching: An Aid to Bibliographic Searchâ€™, â€˜http://dl.acm.org/citation.cfm?id=360855â€™); add_bib(â€˜pkâ€™, â€˜Pekka Kilpel ainenâ€™, â€˜Lecture 4: Set Matching and. Aho-Corasick Algorithmâ€™, â€˜//www.cs.uku.fi/~kilpelai/BSA05/lectures/slides04.pdfâ€™); %&gt; &lt;%= generate_bib_table(:en); %&gt;</p>

