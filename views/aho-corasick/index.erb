<h2 id="introduction">Introduction</h2>
<p>
The best way to explain this topic is with a problem:
</p>
<blockquote>
You are given a text T (1 &lt;= |T| &lt;= 1,000,000) and n (1 &lt;= n &lt;= 1000) patterns, each pattern P<sub>i</sub> has at least 1 and at most 500 characters. Find how many times each pattern occurs in T.
</blockquote>
<p>
Although we can find the number of occurrences of a pattern in linear time (for example, using the <a href="/z-algorithm" target="_blank">Z Algorithm</a>) , there are many patterns and so this approach will not be fast enough to finish in a reasonably amount of time.
</p>
<p>
In short and as you probably have already guessed, there exist a more efficient solution to this problem than our first attempt, the string matching algorithm invented by Alfred V. Aho and Margaret J. Corasick. I will not try to explain the algorithm because the authors explain it very well in their paper, I’m only going to provide you with an implementation and some practice problems.
</p>
<p>
This is the paper &lt;%= file(post, ‘AhoCorasick.pdf’, ‘Efficient String Matching: An Aid to Bibliographic Search’) %&gt;
</p>
<p>
Usually these papers are very complex and hard to understand without enough background, but to my surprise, this one is well explained and easy to understand.
</p>
<h2 id="aho-corasick-implementation-in-c">Aho-Corasick implementation in C++</h2>
<p>Embed: <code>sol.cpp</code></p>
<h2 id="practice-problems">Practice problems</h2>
<ul>
<li>
<a href="http://lightoj.com/volume_showproblem.php?problem=1427" target="_blank">Light OJ 1427 - Substring Frequency (II)</a> | <a href="https://gist.github.com/rendon/042fab740fcb859ca34b" target="_blank">My solution</a>
</li>
<li>
<a href="http://codeforces.com/contest/433/problem/E" target="_blank">Codeforces #248 Div 2 E. Tachibana Kanade’s Tofu</a> | <a href="https://gist.github.com/rendon/b12375831e143732cb63" target="_blank">My solution</a>
</li>
</ul>
<h2 id="references">References</h2>
<p>&lt;% add_bib(‘ac’, ‘Alfred V. Aho and Margaret J. Corasick’, ‘Efficient String Matching: An Aid to Bibliographic Search’, ‘http://dl.acm.org/citation.cfm?id=360855’); add_bib(‘pk’, ‘Pekka Kilpel ainen’, ‘Lecture 4: Set Matching and. Aho-Corasick Algorithm’, ‘//www.cs.uku.fi/~kilpelai/BSA05/lectures/slides04.pdf’); %&gt; &lt;%= generate_bib_table(:en); %&gt;</p>

