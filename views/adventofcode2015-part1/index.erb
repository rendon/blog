<h1 id="advent-of-code-2015---part-1">Advent of code 2015 - part 1</h1>

<p class='metadata'>
    <span class='published'><span class="fa-solid fa-clock"></span> <em>2016-12-01</em></span>
	<span class='updated'><span class="fa-solid fa-clock-rotate-left"></span> <em>2024-05-06</em></span>
    <span class='tags'><span class="fa-solid fa-tag"></span><code>#algorithms</code> <code>#data-structures</code> <code>#post</code></span>
</p>

<p>I recently found out about <a href="http://adventofcode.com/">Advent of Code</a>, and as part of my preparation for this year’s event I’m solving the puzzles of the previous event (<a href="http://adventofcode.com/2015">adventofcode.com/2015</a>), in this short series I’ll publish my solutions with a brief explanation.</p>
<p>A brief explanation about how Advent of Code works, there’s one puzzle every day from December 1st to the 25th, each puzzle has two versions so you can earn upto two stars for every puzzle.</p>
<h2 id="day-1-not-quite-lisp">Day 1: Not Quite Lisp</h2>
<p>Problem description: <a href="http://adventofcode.com/2015/day/1">day/1</a>.</p>
<h3 id="solution">Solution</h3>
<p>For v1: Just use a variable for the current floor, increase by one when we find a <code>(</code>, descrease by 1 when we find a <code>)</code>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="cf">#!/usr/bin/env ruby</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>input <span class="kw">=</span> <span class="dt">File</span><span class="at">.read</span>(<span class="vs">&#39;input.txt&#39;</span>)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>sequence <span class="kw">=</span> input<span class="at">.split</span>(<span class="ss">//</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>floor <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>sequence<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>s<span class="kw">|</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> s <span class="kw">==</span> <span class="ch">&#39;(&#39;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    floor <span class="kw">+=</span> <span class="dv">1</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    floor <span class="kw">-=</span> <span class="dv">1</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> floor</span></code></pre></div>
<p>For v2: Similar to v1, we just need to keep track of the positions.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">#!/usr/bin/env ruby</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>input <span class="kw">=</span> <span class="dt">File</span><span class="at">.read</span>(<span class="vs">&#39;input.txt&#39;</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>sequence <span class="kw">=</span> input<span class="at">.split</span>(<span class="ss">//</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>floor <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>sequence<span class="at">.each_with_index</span> <span class="cf">do</span> <span class="kw">|</span>s, i<span class="kw">|</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> s <span class="kw">==</span> <span class="ch">&#39;(&#39;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    floor <span class="kw">+=</span> <span class="dv">1</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    floor <span class="kw">-=</span> <span class="dv">1</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> floor <span class="kw">==</span> <span class="kw">-</span><span class="dv">1</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">puts</span> i <span class="kw">+</span> <span class="dv">1</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">break</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<h2 id="day-2-i-was-told-there-would-be-no-math">Day 2: I Was Told There Would Be No Math</h2>
<p>Problem description: <a href="http://adventofcode.com/2015/day/2">day/2</a>.</p>
<h3 id="solution-1">Solution</h3>
<p>For v1: Read all lines, parse the three integers and just apply the fomula from the problem description.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>paper <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">File</span><span class="at">.readlines</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>line<span class="kw">|</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">next</span> <span class="cf">if</span> line<span class="at">.length</span> <span class="kw">==</span> <span class="vs">&#39;&#39;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  dimensions <span class="kw">=</span> line<span class="at">.split</span>(<span class="ch">&#39;x&#39;</span>)<span class="at">.map</span>(<span class="kw">&amp;</span><span class="wa">:to_i</span>)<span class="at">.sort</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  l, w, h <span class="kw">=</span> dimensions</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  paper <span class="kw">+=</span> (<span class="dv">2</span> <span class="kw">*</span> l <span class="kw">*</span> w) <span class="kw">+</span> (<span class="dv">2</span> <span class="kw">*</span> l <span class="kw">*</span> h) <span class="kw">+</span> (<span class="dv">2</span> <span class="kw">*</span> w <span class="kw">*</span> h) <span class="kw">+</span> (l <span class="kw">*</span> w)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> paper</span></code></pre></div>
<p>For v2: Take the lowest 2 values (out of 3) and compute the perimeter, plus the product of all of them.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ribbon <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">File</span><span class="at">.readlines</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>line<span class="kw">|</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  dimensions <span class="kw">=</span> line<span class="at">.split</span>(<span class="ch">&#39;x&#39;</span>)<span class="at">.map</span>(<span class="kw">&amp;</span><span class="wa">:to_i</span>)<span class="at">.sort</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  l, w, h <span class="kw">=</span> dimensions</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  ribbon <span class="kw">+=</span> (<span class="dv">2</span> <span class="kw">*</span> l <span class="kw">+</span> <span class="dv">2</span> <span class="kw">*</span> w) <span class="kw">+</span> (l <span class="kw">*</span> w <span class="kw">*</span> h)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> ribbon</span></code></pre></div>
<h2 id="day-3-perfectly-spherical-houses-in-a-vacuum">Day 3: Perfectly Spherical Houses in a Vacuum</h2>
<p>Problem description: <a href="http://adventofcode.com/2015/day/3">day/3</a>.</p>
<h3 id="solution-2">Solution</h3>
<p>For v1: A simulation problem, update your position in a 2-dimensional grid with every command, use a table to keep track of the unique positions you’ve been in.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>grid <span class="kw">=</span> <span class="kw">{[</span><span class="dv">0</span>, <span class="dv">0</span><span class="kw">]</span> <span class="kw">=&gt;</span> <span class="dv">true</span><span class="kw">}</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>r <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>c <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">File</span><span class="at">.read</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.split</span>(<span class="ss">//</span>)<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>i<span class="kw">|</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  r <span class="kw">+=</span> <span class="dv">1</span> <span class="cf">if</span> i <span class="kw">==</span> <span class="ch">&#39;v&#39;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  r <span class="kw">-=</span> <span class="dv">1</span> <span class="cf">if</span> i <span class="kw">==</span> <span class="ch">&#39;^&#39;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  c <span class="kw">+=</span> <span class="dv">1</span> <span class="cf">if</span> i <span class="kw">==</span> <span class="ch">&#39;&gt;&#39;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  c <span class="kw">-=</span> <span class="dv">1</span> <span class="cf">if</span> i <span class="kw">==</span> <span class="ch">&#39;&lt;&#39;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  grid<span class="kw">[</span>r, c<span class="kw">]</span>(<span class="ss">/r, c) = true</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="ss">end</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="ss">puts grid.length</span></span></code></pre></div>
<p>For v2: Likewise, except that you have to alternate commands with Robo-Santa, the first command is for Santa, the second one is for Robo-Santa, etc.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>grid <span class="kw">=</span> <span class="kw">{[</span><span class="dv">0</span>, <span class="dv">0</span><span class="kw">]</span> <span class="kw">=&gt;</span> <span class="dv">true</span><span class="kw">}</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> move(r, c, d)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  r <span class="kw">+=</span> <span class="dv">1</span> <span class="cf">if</span> d <span class="kw">==</span> <span class="ch">&#39;v&#39;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  r <span class="kw">-=</span> <span class="dv">1</span> <span class="cf">if</span> d <span class="kw">==</span> <span class="ch">&#39;^&#39;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  c <span class="kw">+=</span> <span class="dv">1</span> <span class="cf">if</span> d <span class="kw">==</span> <span class="ch">&#39;&gt;&#39;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  c <span class="kw">-=</span> <span class="dv">1</span> <span class="cf">if</span> d <span class="kw">==</span> <span class="ch">&#39;&lt;&#39;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> r, c</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>sr <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>sc <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>rr <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>rc <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="dt">File</span><span class="at">.read</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.split</span>(<span class="ss">//</span>)<span class="at">.each_with_index</span> <span class="cf">do</span> <span class="kw">|</span>d, i<span class="kw">|</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> i <span class="kw">%</span> <span class="dv">2</span> <span class="kw">==</span> <span class="dv">0</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>    sr, sc <span class="kw">=</span> move(sr, sc, d)</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>    grid<span class="kw">[</span>sr, sc<span class="kw">]</span>(<span class="ss">/sr, sc) = true</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ss">  else</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="ss">    rr, rc = move(rr, rc, d)</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="ss">    grid[rr, rc](/</span>rr, rc) <span class="kw">=</span> <span class="dv">true</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> grid<span class="at">.length</span></span></code></pre></div>
<h2 id="day-4-the-ideal-stocking-stuffer">Day 4: The Ideal Stocking Stuffer</h2>
<p>Problem description: <a href="http://adventofcode.com/2015/day/4">day/4</a>.</p>
<h3 id="solution-3">Solution</h3>
<p>For v1: Well, I just brute-forced this one, used Ruby’s <code>Digest::MD5</code> to compute the checksum.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">require</span> <span class="vs">&#39;digest&#39;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>secret <span class="kw">=</span> <span class="vs">&#39;bgvyzdsv&#39;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>key <span class="kw">=</span> <span class="dv">1</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">loop</span> <span class="cf">do</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  md5 <span class="kw">=</span> <span class="dt">Digest</span><span class="kw">::</span><span class="dt">MD5</span><span class="at">.new</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  md5<span class="at">.update</span>(secret <span class="kw">+</span> key<span class="at">.to_s</span>)</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  hex <span class="kw">=</span> md5<span class="at">.hexdigest</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> hex<span class="at">.start_with?</span>(<span class="vs">&#39;00000&#39;</span>)</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">puts</span> key</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">break</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>  key <span class="kw">+=</span> <span class="dv">1</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>For v2: The same as v1, just add one more zero.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">require</span> <span class="vs">&#39;digest&#39;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>secret <span class="kw">=</span> <span class="vs">&#39;bgvyzdsv&#39;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>key <span class="kw">=</span> <span class="dv">1</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="fu">loop</span> <span class="cf">do</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  md5 <span class="kw">=</span> <span class="dt">Digest</span><span class="kw">::</span><span class="dt">MD5</span><span class="at">.new</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  md5<span class="at">.update</span>(secret <span class="kw">+</span> key<span class="at">.to_s</span>)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  hex <span class="kw">=</span> md5<span class="at">.hexdigest</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> hex<span class="at">.start_with?</span>(<span class="vs">&#39;000000&#39;</span>)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">puts</span> key</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">break</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  key <span class="kw">+=</span> <span class="dv">1</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<h2 id="day-5-doesnt-he-have-intern-elves-for-this">Day 5: Doesn’t He Have Intern-Elves For This?</h2>
<p>Problem description: <a href="http://adventofcode.com/2015/day/5">day/5</a>.</p>
<h3 id="solution-4">Solution</h3>
<p>For v1: Just follow the instructions <strong>carefully</strong> and you should be able to solve this problem.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> nice?(word)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  chars <span class="kw">=</span> word<span class="at">.split</span>(<span class="ss">//</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  vowels <span class="kw">=</span> <span class="kw">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="ch">&#39;a&#39;</span> <span class="kw">=&gt;</span> <span class="dv">0</span>,</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="ch">&#39;e&#39;</span> <span class="kw">=&gt;</span> <span class="dv">0</span>,</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="ch">&#39;i&#39;</span> <span class="kw">=&gt;</span> <span class="dv">0</span>,</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="ch">&#39;o&#39;</span> <span class="kw">=&gt;</span> <span class="dv">0</span>,</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="ch">&#39;u&#39;</span> <span class="kw">=&gt;</span> <span class="dv">0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">}</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  forbidden <span class="kw">=</span> <span class="kw">{</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="vs">&#39;ab&#39;</span> <span class="kw">=&gt;</span> <span class="dv">true</span>,</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="vs">&#39;cd&#39;</span> <span class="kw">=&gt;</span> <span class="dv">true</span>,</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="vs">&#39;pq&#39;</span> <span class="kw">=&gt;</span> <span class="dv">true</span>,</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="vs">&#39;xy&#39;</span> <span class="kw">=&gt;</span> <span class="dv">true</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">}</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  consecutive <span class="kw">=</span> <span class="dv">false</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0</span><span class="at">.upto</span>(chars<span class="at">.length</span> <span class="kw">-</span> <span class="dv">2</span>) <span class="cf">do</span> <span class="kw">|</span>i<span class="kw">|</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    pair <span class="kw">=</span>  chars<span class="kw">[</span>i<span class="kw">]</span> <span class="kw">+</span> chars<span class="kw">[</span>i<span class="kw">+</span><span class="dv">1</span><span class="kw">]</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">false</span> <span class="cf">if</span> forbidden<span class="kw">[</span>pair<span class="kw">]</span> <span class="kw">==</span> <span class="dv">true</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    consecutive <span class="kw">||=</span> (chars<span class="kw">[</span>i<span class="kw">]</span> <span class="kw">==</span> chars<span class="kw">[</span>i<span class="kw">+</span><span class="dv">1</span><span class="kw">]</span>)</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">false</span> <span class="cf">unless</span> consecutive</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>  chars<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>c<span class="kw">|</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    vowels<span class="kw">[</span>c<span class="kw">]</span> <span class="kw">+=</span> <span class="dv">1</span> <span class="cf">if</span> vowels<span class="kw">[</span>c<span class="kw">]</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> vowels<span class="at">.values.reduce</span>(<span class="kw">&amp;</span>:<span class="kw">+</span>) <span class="kw">&gt;=</span> <span class="dv">3</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> <span class="dt">File</span><span class="at">.readlines</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.select</span> <span class="kw">{|</span>w<span class="kw">|</span> nice?(w<span class="at">.chomp</span>) <span class="kw">}</span><span class="at">.length</span></span></code></pre></div>
<p>For v2: Just follow the instructions <strong>even more carefully</strong>, I was trapped by a moment by a pesky bug in this version.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> nice?(word)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  chars <span class="kw">=</span> word<span class="at">.split</span>(<span class="ss">//</span>)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  pairs <span class="kw">=</span> <span class="kw">{}</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  contains_pair <span class="kw">=</span> <span class="dv">false</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  prev <span class="kw">=</span> <span class="vs">&#39;&#39;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  (chars<span class="at">.length</span> <span class="kw">-</span> <span class="dv">1</span>)<span class="at">.downto</span>(<span class="dv">1</span>) <span class="cf">do</span> <span class="kw">|</span>i<span class="kw">|</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    pair <span class="kw">=</span> chars<span class="kw">[</span>i<span class="dv">-1</span><span class="kw">]</span> <span class="kw">+</span> chars<span class="kw">[</span>i<span class="kw">]</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    contains_pair <span class="kw">||=</span> (pairs<span class="kw">[</span>pair<span class="kw">]</span> <span class="kw">==</span> <span class="dv">true</span>)</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    pairs<span class="kw">[</span>prev<span class="kw">]</span> <span class="kw">=</span> <span class="dv">true</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    prev <span class="kw">=</span> pair</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">false</span> <span class="cf">unless</span> contains_pair</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0</span><span class="at">.upto</span>(chars<span class="at">.length</span> <span class="kw">-</span> <span class="dv">3</span>) <span class="cf">do</span> <span class="kw">|</span>i<span class="kw">|</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">true</span> <span class="cf">if</span> chars<span class="kw">[</span>i<span class="kw">]</span> <span class="kw">==</span> chars<span class="kw">[</span>i<span class="kw">+</span><span class="dv">2</span><span class="kw">]</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  <span class="dv">false</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> <span class="dt">File</span><span class="at">.readlines</span>(<span class="vs">&#39;input.txt&#39;</span>)<span class="at">.select</span> <span class="kw">{|</span>w<span class="kw">|</span> nice?(w<span class="at">.chomp</span>) <span class="kw">}</span><span class="at">.length</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> nice?(<span class="vs">&#39;qjhvhtzxzqqjkmpb&#39;</span>)</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> nice?(<span class="vs">&#39;xxyxx&#39;</span>)</span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> nice?(<span class="vs">&#39;uurcxstgmygtbstg&#39;</span>)</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> nice?(<span class="vs">&#39;ieodomkazucvgmuy&#39;</span>)</span></code></pre></div>

