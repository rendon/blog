<!-- vim: set spelllang=es_mx: -->
<h1 id="de-poligonos-y-estrellas">De poligonos y estrellas</h1>

<p class='metadata'>
    <span class='published'><span class="fa-solid fa-clock"></span> <em>2016-02-18</em></span>
	<span class='updated'><span class="fa-solid fa-clock-rotate-left"></span> <em>2024-05-07</em></span>
    <span class='tags'><span class="fa-solid fa-tag"></span><code>#math</code> <code>#computer-graphics</code> <code>#algorithms</code> <code>#post</code></span>
</p>

<p>Hace algun tiempo tuve la necesidad de desarrollar una aplicación en Java que dibujara polígonos regulares y estrellas de <span class="math inline"><em>n</em></span> lados y <span class="math inline"><em>n</em></span> picos respectivamente para una materia en la escuela. En un principio me fue difícil solucionar este problema pero al final encontré la manera. A continuación comento en que consiste la solución.</p>
<p>Es común que la mayoría de nosotros estemos familiarizados con el sistema de coordenadas rectangulares donde cada punto en el espacio se representa por dos valores de la forma <span class="math inline">(<em>x</em>,<em>y</em>)</span> donde <span class="math inline"><em>x</em>, <em>y</em> ∈ ℝ</span>, <span class="math inline"><em>x</em></span> corresponde al desplazamiento sobre la recta horizontal y <span class="math inline"><em>y</em></span> corresponde al desplazamiento vertical. Véase figura .</p>
<figure>
<img src="/de-poligonos-y-estrellas/plano_cartesiano.png" alt="Plano cartesiano y coordenadas rectangulares" />
<figcaption aria-hidden="true">Plano cartesiano y coordenadas rectangulares</figcaption>
</figure>
<p>Con este sistema de coordenadas es posible representar cualquier objeto geométrico, incluyendo nuestros polígonos, sin embargo existen otros sistemas de coordenadas que nos facilitan las cosas para esta tarea en especial, me refiero a las <a href="http://es.wikipedia.org/wiki/Coordenadas_polares">coordenadas polares.</a>:</p>
<figure>
<img src="/de-poligonos-y-estrellas/coordenadas_polares.png" alt="Coordenadas polares" />
<figcaption aria-hidden="true">Coordenadas polares</figcaption>
</figure>
<p>Como se aprecia en la imagen el sistema consiste en una serie de círculos concéntricos con radios de diferente longitud en el rango <span class="math inline">[0,∞]</span>. Cada punto en el espacio es representado por la dupla <span class="math inline">(<em>r</em>,<em>θ</em>)</span> donde <span class="math inline"><em>r</em></span> es el radio de un círculo y <span class="math inline"><em>θ</em></span> el ángulo a partir de la recta horizontal en sentido anti-horario. Dependiendo de la unidad en que se midan los ángulos <span class="math inline"><em>θ</em></span> puede tomar los valores <span class="math inline">[−<em>π</em>,<em>π</em>]</span> o <span class="math inline">[0,2<em>π</em>]</span> si la unidad es el radián, o bien <span class="math inline">[0,360<sup>∘</sup>]</span> si la unidad se mide en grados.</p>
<p>Una vez asimilados estos conceptos podemos formular la solución. Para un polígono de <span class="math inline"><em>N</em></span> lados y radio <span class="math inline"><em>r</em></span> (radio del círculo circunscrito al polígono) las coordenadas de las <span class="math inline"><em>N</em></span> esquinas son <span class="math inline">$(r, 1\frac{2\pi}{N}), (r, 2\frac{2\pi}{N}), \ldots , (r, N\frac{2\pi}{N})$</span>. Para el caso de la estrella de <span class="math inline"><em>N</em></span> picos se trabaja de manera similar: Se construye un polígono regular de <span class="math inline"><em>N</em></span> lados y para cada par de puntos se agrega un punto más a la mitad de estos dos con un radio menor a <span class="math inline"><em>r</em></span> y por último solo resta unir los puntos con líneas rectas.</p>
<p>Hablemos un poco a cerca de la implementación. El lenguaje que empleo aquí es Java pero esto puede fácilmente ser portado a cualquier otro lenguaje ya que la teoría es la misma. Veamos pues como esta conformada el área de dibujo en Java:</p>
<figure>
<img src="/de-poligonos-y-estrellas/coordenadas_java.png" alt="Sistema de coordenadas en Java" />
<figcaption aria-hidden="true">Sistema de coordenadas en Java</figcaption>
</figure>
<p>El eje <span class="math inline"><em>x</em></span> se comporta tal cual lo conocemos pero al parecer tenemos un pequeño inconveniente con el eje <span class="math inline"><em>y</em></span> que se comporta de forma inversa, cuando <span class="math inline"><em>y</em></span> aumenta el desplazamiento es hacia abajo. Es necesario aplicar una pequeña transformación al eje <span class="math inline"><em>y</em></span> para restaurar su comportamiento y de esta manera facilitarnos las cosas. La transformación que necesitamos es una reflexión:</p>
<p>$ y’ = maxY - y$</p>
<p>Donde <span class="math inline"><em>m</em><em>a</em><em>x</em><em>Y</em></span> es la altura del área de dibujo. Para obtener el valor original de <span class="math inline"><em>y</em></span> a a partir de <span class="math inline"><em>y</em>′</span> empleamos la siguiente operación:</p>
<p>$ y = maxY - y’$</p>
<p>Ya casi tenemos todo listo para empezar a codificar, solo falta ver como convertir las coordenadas polares a rectangulares, pequeño detalle. De la siguiente ilustración se puede observar que tenemos los datos necesarios para obtener las componentes rectangulares de un punto.</p>
<figure>
<img src="/de-poligonos-y-estrellas/polar_a_rectangular.png" alt="Componentes de un punto" />
<figcaption aria-hidden="true">Componentes de un punto</figcaption>
</figure>
<p>La componente horizontal es el cateto adyacente y por tanto <span class="math inline"><em>x</em> = <em>r</em>cos (<em>θ</em>)</span>, el cateto opuesto es la componente vertical y de ahí que <span class="math inline"><em>y</em> = <em>r</em>sin (<em>θ</em>)</span>. Ahora sí, al código. Veamos como quedaría el método para calcular las coordenadas de un polígono:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> Compute the coordinates of a polygon<span class="co">.</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param n number of sides</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param center center of the polygon</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param point point of the first corner</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="co">*/</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">computePolygon</span><span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="bu">Point</span> center<span class="op">,</span> <span class="bu">Point</span> point<span class="op">)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> r <span class="op">=</span> center<span class="op">.</span><span class="fu">distance</span><span class="op">(</span>point<span class="op">),</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>           cx <span class="op">=</span> center<span class="op">.</span><span class="fu">getX</span><span class="op">(),</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>           cy <span class="op">=</span> <span class="fu">ly</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span>center<span class="op">.</span><span class="fu">getY</span><span class="op">()),</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>           px <span class="op">=</span> point<span class="op">.</span><span class="fu">getX</span><span class="op">(),</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>           py <span class="op">=</span> <span class="fu">ly</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span>point<span class="op">.</span><span class="fu">getY</span><span class="op">()),</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>           theta <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">PI</span> <span class="op">/</span> n<span class="op">,</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>           beta <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">atan2</span><span class="op">(</span>py <span class="op">-</span> cy<span class="op">,</span> px <span class="op">-</span> cx<span class="op">),</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>           x<span class="op">,</span> y<span class="op">,</span> xPrime<span class="op">,</span> yPrime<span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    polygon<span class="op">.</span><span class="fu">clear</span><span class="op">();</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>i <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        y <span class="op">=</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>i <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Rotate the polygon such that the mouse click matches the  polygon corner</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">-</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">+</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Translate the polygon to it&#39;s original position</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">+=</span> cx<span class="op">;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">+=</span> cy<span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        polygon<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="bu">Point</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>xPrime<span class="op">),</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>yPrime<span class="op">)));</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>En las líneas 25 a 27 se hace una rotación a la figura con el fin de que el primer vértice del polígono coincida con el punto donde se encuentra el apuntador del ratón. Esta transformación en realidad no forma parte del algoritmo sino más bien por estética. Los métodos <code>int ly(int y)</code> y <code>int oy(int y)</code> se encargan de obtener <span class="math inline"><em>y</em>′</span> y <span class="math inline"><em>y</em></span> respectivamente.</p>
<pre><code>private int ly(int y) { return maxY - y; }
private int oy(int y) { return maxY - y; }</code></pre>
<p>Como pueden observer los métodos son idénticos, sin embargo el objetivo es distinto. Por claridad los emplearemos para sus respectivas funciones. El código para las estrellas es el siguiente:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> Compute the coordinates of a n<span class="co">-</span>pointed star<span class="co">.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param n number of points</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param center star center</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a> <span class="co">*</span> <span class="co">@</span>param point first point of the star</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a> <span class="co">*/</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">computeStar</span><span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="bu">Point</span> center<span class="op">,</span> <span class="bu">Point</span> point<span class="op">)</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> r <span class="op">=</span> center<span class="op">.</span><span class="fu">distance</span><span class="op">(</span>point<span class="op">),</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>           theta <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">PI</span> <span class="op">/</span> n<span class="op">,</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>           cx <span class="op">=</span> center<span class="op">.</span><span class="fu">getX</span><span class="op">(),</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>           cy <span class="op">=</span> <span class="fu">ly</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span>center<span class="op">.</span><span class="fu">getY</span><span class="op">()),</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>           px <span class="op">=</span> point<span class="op">.</span><span class="fu">getX</span><span class="op">(),</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>           py <span class="op">=</span> <span class="fu">ly</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span>point<span class="op">.</span><span class="fu">getY</span><span class="op">()),</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>           beta <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">atan2</span><span class="op">(</span>py <span class="op">-</span> cy<span class="op">,</span> px <span class="op">-</span> cx<span class="op">),</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>           x<span class="op">,</span> y<span class="op">,</span> xPrime<span class="op">,</span> yPrime<span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    star<span class="op">.</span><span class="fu">clear</span><span class="op">();</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>i <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        y <span class="op">=</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>i <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Rotate the polygon such that the mouse click matches the  star point</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">-</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">+</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Translate to it&#39;s original position</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">+=</span> cx<span class="op">;</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">+=</span> cy<span class="op">;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>        star<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="bu">Point</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>xPrime<span class="op">),</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>yPrime<span class="op">)));</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> <span class="fl">0.5</span> <span class="op">*</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>i <span class="op">*</span> theta <span class="op">+</span> <span class="fl">0.5</span> <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>        y <span class="op">=</span> <span class="fl">0.5</span> <span class="op">*</span> r <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>i <span class="op">*</span> theta <span class="op">+</span> <span class="fl">0.5</span> <span class="op">*</span> theta<span class="op">);</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">-</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">=</span> x <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span><span class="op">(</span>beta<span class="op">)</span> <span class="op">+</span> y <span class="op">*</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span><span class="op">(</span>beta<span class="op">);</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>        xPrime <span class="op">+=</span> cx<span class="op">;</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>        yPrime <span class="op">+=</span> cy<span class="op">;</span></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>        star<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="bu">Point</span><span class="op">((</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>xPrime<span class="op">),</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span><span class="bu">Math</span><span class="op">.</span><span class="fu">round</span><span class="op">(</span>yPrime<span class="op">)));</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Ahora solo resta construir una interfaz para la aplicación, sin embargo eso esta fuera del alcance de este post así que no entraremos en detalles. Al final les dejo el código completo de la aplicación por si acaso. He aquí el resultado:</p>
<figure>
<img src="/de-poligonos-y-estrellas/polygon_test.png" alt="El resultado" />
<figcaption aria-hidden="true">El resultado</figcaption>
</figure>
<p>Hasta aquí con este post, espero les sea de utilidad. He de comentarles que este tema de los gráficos por computadora es uno de mis temas favoritos ya que es aquí donde encuentro una aplicación práctica e interesante a tanta teoría de mis cursos de matemáticas. Tengo planes de hacer una serie de artículos a cerca de estos temas con más detalle y aplicaciones. Hasta la próxima!</p>
<h2 id="referencias">Referencias</h2>
<ol>
<li>
Computer Graphics for Java Programmers, Second Edition <em>by Leen AmmeraalandKang Zhang</em>
</li>
<li>
<a href="http://es.wikipedia.org/wiki/Coordenadas_polares">Coordenadas polares</a>, <em>Wikipedia</em>
</li>
<li>
<a href="http://es.wikipedia.org/wiki/Coordenadas_cartesianas">Coordenadas cartesianas</a>, <em>Wikipedia</em>
</li>
</ol>

