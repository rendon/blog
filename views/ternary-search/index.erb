<h1 id="ternary-search">Ternary search</h1>

<p class='metadata'>
    <span class='published'><span class="fa-solid fa-clock"></span> <em>2016-02-18</em></span>
	<span class='updated'><span class="fa-solid fa-clock-rotate-left"></span> <em>2024-05-07</em></span>
    <span class='tags'><span class="fa-solid fa-tag"></span><code>#algorithms</code> <code>#post</code></span>
</p>

<p>Hi! This time I going to talk about a new technique I’ve just learned, <a href="http://en.wikipedia.org/wiki/Ternary_search">Ternary Search</a>.</p>
<h2 id="ternary-search-1">Ternary search</h2>
<p>Ternary search is a technique similar to <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">Binary Search</a> and is important since ternary search could success in situations where the binary search would fail. Time ago I was very criticized in the <a href="http://codeforces.com">Codeforces</a> forum for arguing that has no sense to use ternary search if it is not more efficient than binary search. Is not about efficiency but –said the others. Actually I meant to ternary search in arrays, to reduce the search space to a third part, etc. Now I understand what they were talking about.</p>
<h2 id="sample-problem">Sample problem</h2>
<p>You can solve the <a href="http://lightoj.com/volume_showproblem.php?problem=1146">1146 - Closest Distance</a> problem from <a href="http://lightoj.com">lightoj.com</a> with this technique.</p>
<h2 id="solution-to-sample-problem">Solution to sample problem</h2>
<h3 id="basic-idea">Basic idea</h3>
<p>Compute the distance between the two men as they move and take the minimum distance.</p>
<figure>
<img src="/ternary-search/ternary_search_1.png" alt="Termnary search example" />
<figcaption aria-hidden="true">Termnary search example</figcaption>
</figure>
<p>Obviously, we can only take discrete points, and, since the problem ask for an answer with an error less than 1e-6, a brute force approach would take much time, very much. So the strategy is to use ternary search:</p>
<p><img src="/ternary-search/ternary_search_2.png" alt="Step 1" /> <img src="/ternary-search/ternary_search_3.png" alt="Step 2" /> <img src="/ternary-search/ternary_search_4.png" alt="Step 3" /> <img src="/ternary-search/ternary_search_5.png" alt="Step 4" /></p>
<p>And so on. Here is my solution:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;complex&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#define x</span><span class="op">()</span><span class="pp"> </span>real<span class="op">()</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define y</span><span class="op">()</span><span class="pp"> </span>imag<span class="op">()</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> complex<span class="op">&lt;</span><span class="dt">double</span><span class="op">&gt;</span> Vector<span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> complex<span class="op">&lt;</span><span class="dt">double</span><span class="op">&gt;</span> point<span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>point points<span class="op">[</span><span class="dv">5</span><span class="op">];</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="dt">double</span> closest<span class="op">()</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    Vector A <span class="op">=</span> points<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">-</span> points<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    Vector B <span class="op">=</span> points<span class="op">[</span><span class="dv">3</span><span class="op">]</span> <span class="op">-</span> points<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    Vector unita <span class="op">=</span> A<span class="op">/</span>abs<span class="op">(</span>A<span class="op">);</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    Vector unitb <span class="op">=</span> B<span class="op">/</span>abs<span class="op">(</span>B<span class="op">);</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    point startA <span class="op">=</span> points<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    point startB <span class="op">=</span> points<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> maxa <span class="op">=</span> abs<span class="op">(</span>A<span class="op">);</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> mina <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> maxb <span class="op">=</span> abs<span class="op">(</span>B<span class="op">);</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> minb <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> ta<span class="op">,</span> tb<span class="op">,</span> ans <span class="op">=</span> <span class="dv">1000</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    point a<span class="op">,</span> b<span class="op">,</span> c<span class="op">,</span> d<span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> count <span class="op">=</span> <span class="dv">500</span><span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>count<span class="op">--)</span> <span class="op">{</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        ta <span class="op">=</span> abs<span class="op">(</span>maxa <span class="op">-</span> mina<span class="op">)/</span><span class="dv">3</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>        tb <span class="op">=</span> abs<span class="op">(</span>maxb <span class="op">-</span> minb<span class="op">)/</span><span class="dv">3</span><span class="op">;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        a <span class="op">=</span> <span class="op">(</span>unita <span class="op">*</span> <span class="op">(</span>mina <span class="op">+</span> ta<span class="op">))</span> <span class="op">+</span> startA<span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        b <span class="op">=</span> <span class="op">(</span>unitb <span class="op">*</span> <span class="op">(</span>minb <span class="op">+</span> tb<span class="op">))</span> <span class="op">+</span> startB<span class="op">;</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        ta <span class="op">+=</span> ta<span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        tb <span class="op">+=</span> tb<span class="op">;</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        c <span class="op">=</span> <span class="op">(</span>unita <span class="op">*</span> <span class="op">(</span>mina <span class="op">+</span> ta<span class="op">))</span> <span class="op">+</span> startA<span class="op">;</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        d <span class="op">=</span> <span class="op">(</span>unitb <span class="op">*</span> <span class="op">(</span>minb <span class="op">+</span> tb<span class="op">))</span> <span class="op">+</span> startB<span class="op">;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>abs<span class="op">(</span>b <span class="op">-</span> a<span class="op">)</span> <span class="op">&lt;</span> abs<span class="op">(</span>d <span class="op">-</span> c<span class="op">))</span> <span class="op">{</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            maxa <span class="op">=</span> maxa <span class="op">-</span> ta<span class="op">/</span><span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            maxb <span class="op">=</span> maxb <span class="op">-</span> tb<span class="op">/</span><span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>            ans <span class="op">=</span> <span class="bu">std::</span>min<span class="op">(</span>ans<span class="op">,</span> abs<span class="op">(</span>b <span class="op">-</span> a<span class="op">));</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>            mina <span class="op">=</span> mina <span class="op">+</span> ta<span class="op">/</span><span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>            minb <span class="op">=</span> minb <span class="op">+</span> tb<span class="op">/</span><span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>            ans <span class="op">=</span> <span class="bu">std::</span>min<span class="op">(</span>ans<span class="op">,</span> abs<span class="op">(</span>d <span class="op">-</span> c<span class="op">));</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ans<span class="op">;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">**</span>argv<span class="op">)</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> t<span class="op">,</span> tc<span class="op">,</span> i<span class="op">;</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x<span class="op">,</span> y<span class="op">;</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>    scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>t<span class="op">);</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>tc <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> tc <span class="op">&lt;=</span> t<span class="op">;</span> tc<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">4</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>            scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>x<span class="op">,</span> <span class="op">&amp;</span>y<span class="op">);</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>            points<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> point<span class="op">(</span>x<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;Case </span><span class="sc">%d</span><span class="st">: </span><span class="sc">%.10lf\n</span><span class="st">&quot;</span><span class="op">,</span> tc<span class="op">,</span> closest<span class="op">());</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
<h2 id="references">References</h2>
<table border="0">
<tr>
<td>
1
</td>
<td>
<a href="http://en.wikipedia.org/wiki/Ternary_search">Ternary search</a>
</td>
</tr>
<tr>
<td>
2
</td>
<td>
<a href="http://codeforces.com/blog/entry/3560#comment-71935">Codeforces discussion about ternary search</a>
</td>
</tr>
<tr>
<td>
3
</td>
<td>
<a href="http://apps.topcoder.com/forums/?module=Thread&amp;threadID=506787&amp;start=0&amp;mc=27#507870">Topcoder discussion about ternary search</a>
</td>
</tr>
</table>

